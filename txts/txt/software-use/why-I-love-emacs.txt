
Why I prefer using Emacs over other graphical text-editing software
=============================================

Applications come in many "dimensions": 

 * 3D: 3d tools like Blender.
 * 2D: things like browsers and image editors.
 * 1D: text-only: The terminal.
 * underground: Not to be used by a user. Some background or system app (or a server script).

Depending on your task, you'll have to choose one of these dimensions.

But why do people tend to avoid the 1D part?

new-user friendliness
-----------------------

These days, user interfaces need to be really user-friendly. There is a lot of competition in this domain.

The problem I see is that modern user interfaces are mostly new-user friendly. Also, applications become outdated and replaced very fast. Few apps can reach a featureful state without looking old to new users. New apps with less features become more popular because they are more beautiful. Experienced users have to follow trends by switching to new software. By doing this, users lose the experience level they have reached with that software.

Virtual terminals are outdated
------------------------------

I use Emacs in a virtual terminal and I think many people do the same. Terminals are old things that most windows programmers fear. However, tools such as Emacs have continued to evolve for more than 20 years in this environment. The maturity level of the programs you can use in a terminal is quite phenomenal.

I think that keyboards and terminals are still the best tools to write code in 2014. Touchscreens and 3D motion detectors will change little to it.

Using a text only interface to edit text feels appropriate to me. Just like using a 3D interface to edit 3D scenes would seem normal. Don't add dimensions that you don't need! 

Learning stuff is not the new trend
-----------------------------------

Most of the people(including programmers) seem to be afraid of investing efforts in learning something new when it comes to software.

Of course, learning Emacs isn't easy when compared to modern software. Most desktop apps take a few dozens of minutes to understand. Web apps require even less time (or else the makers would start losing profits).

- Did we reach a point in humanity where we can stop learning and be happy? -

Sometimes, text-only software is like math; It is difficult to learn, but when you get a grab at it, it becomes more useful than other graphical tools (or mind-reading or whatever technology the future will bring). What I am trying to say is: software that follow new trends is not necessarily what you should choose all the time. Also, software that takes time to learn may turn out to be better in the long run. 

Finally, learning to use Emacs is rewarding. It makes you feel like one of these hackers in the movies...

My reasons to use Emacs
=======================

My goal here is not to show you how to do everything I list here, use the internet to learn more about these features once you understand Emacs's basics.

I like it
---------

I like it.

Macros:
-------

Macros allow me to record actions and repeat them many times. Macros are essentially a drug to me.


Multiline-Editing
-----------------

Erasing rectangles of text, writing the same text on multiple lines at the same time, pasting rectangles you erased somewhere else, etc.

Eshell
-----------

This allows you to have a terminal withing Emacs, which already runs in a terminal.


Windows
-----------

You can split your terminal screen to have a terminal on a window and a text window on the other.

M-x tetris
--------------

You can play tetris in Emacs.

M-x rmail
----------------

When I started to use Emacs, I heard that you could use it to read your emails. I was like: "who the hell would do that". Some months have gone by and now I actually use this tool to read my emails on my server.

Emacs gives you the ability to do many things you could not normally do in a text-only environment.

Code completion
-----------------

When typing something you already typed in a given file, use meta-shift-slash (m-shift-/). Emacs will try to auto-complete that word.

Auto indentation and syntax highlighting for many programming languages
----------------------------

You can find modes for most languages you know of.

Ispell
------

You can use that to check the spelling of your document.


Extending Emacs with elisp scripts
-----------

I don't really write scripts for Emacs, but I use many elisp scripts I found on the internet. they make my life easier.

Works well over ssh
-------------------

Nice when working on a remote server, doing minor changes to a webpage or changing apache2 configuration files, for example. (As I just did a few hours ago)
