How to build SpiderMonkey in Debian
============================================

SpiderMonkey is Mozilla's javascript engine. You can use it for fun  and profit.

You will probably need to build spidermonkey if you want to embed it in an application.

These building instructions are for Debian. They could work with Ubuntu and they should be easy to adapt for other distributions. 

Step 1: Download a snapshot of the Mozilla-central mercurial tree
-----------------------------------

Use the "gz" link at the top of the screen in the following page

[http://hg.mozilla.org/mozilla-central/file/tip]

Step 2.1: Uncompress the archive:
-------------------

[terminal]
gunzip -d mozilla-central-*.tar.gz
[/terminal]

Step 2.2: Untar the .tar:
--------------------------

[terminal]
tar -xvf mozilla-central-*.tar
[/terminal]

You may want to move the extracted folder in ~/src, it is up to you

Note: I did this in 2 steps because tar `-zxvf failed`

Step 3: Get autoconf 2.13
----------------------

Seems like the developers have not updated the code to work with newer versions.

[terminal]
sudo apt-get install autoconf2.13
[/terminal]

Step 4: Build
--------------

Time to build. From the "building spidermonkey" link:

(this will take time)

[terminal]
cd js/src
autoconf-2.13

mkdir build-release
cd build-release
../configure
make
[/terminal]


Step 5: See if build worked
--------------------

Run the javascript shell that was built and see if it works;

[terminal]
# Should return 1
dist/bin/js -e "print(Math.cos(2*Math.PI))"
[/terminal]


Step 6: Create an example program
=======================

SpiderMonkey's api seems to have changed quite often, but the following code will work with SpiderMonkey from prior this week (Today is October 22, 2014). I have found a lot of hello worlds that do not work on the internet.

You will need the code and a makefile: do not forget to change the SM path in the makefile

main.cpp:

[code]
#include &lt;stdint.h&gt;
#include &lt;limits&gt;
#include "jsapi.h"


/* The class of the global object. */
static JSClass global_class = {
    "global", 
    JSCLASS_GLOBAL_FLAGS,
    JS_PropertyStub, 
    JS_DeletePropertyStub, 
    JS_PropertyStub, 
    JS_StrictPropertyStub,
    JS_EnumerateStub,  
    JS_ResolveStub, 
    JS_ConvertStub
};


int main(int argc, const char *argv[])
{
    JS_Init();

    JSRuntime *rt = JS_NewRuntime(8L * 1024 * 1024, JS_NO_HELPER_THREADS);
    if (!rt)
        return 1;

    JSContext *cx = JS_NewContext(rt, 8192);
    if (!cx)
        return 1;

    JS::RootedObject global(cx, JS_NewGlobalObject(cx, &global_class, nullptr, JS::DontFireOnNewGlobalHook));
    if (!global)
        return 1;

    
    JS::RootedValue rval(cx);
                      
    bool ok;
    {
        JSAutoCompartment ac(cx, global); 
        JS_InitStandardClasses(cx, global);

        const char *script = "'hello'+'world, it is '+new Date()";
        const char *filename = "noname";
        int lineno = 0;
        ok = JS_EvaluateScript(cx, global, script, strlen(script), filename, lineno, &rval);
        if (rval.isNull() | rval.isFalse() )
            return 1;
    }

    JSString *str = rval.toString();
    printf("%s\n", JS_EncodeString(cx, str));

    JS_DestroyContext(cx);
    JS_DestroyRuntime(rt);
    JS_ShutDown();
    return 0;
}

[/code]

makefile:

[code]
# Path where SpiderMonkey(SM) is
# CHANGE THIS
SM_ROOT = '/home/antoine/src/mozilla-central-33c0181c4a25/js/src/'

# Some subfolders of SM
SM_DIST_PATH = $(SM_ROOT)'build-release/dist/'
SM_DIST_BIN_PATH = $(SM_DIST_PATH)'bin/'
SM_INCLUDE_PATH = $(SM_DIST_PATH)'include/'

# We need that
OPTIONS = -std=c++11
# Add those include paths
OPTIONS += -I$(SM_ROOT)
OPTIONS += -I$(SM_INCLUDE_PATH)
# Link external libraries
OPTIONS += -L$(SM_DIST_BIN_PATH)
# Seems like we need that
OPTIONS += -D__STDC_LIMIT_MACROS
OPTIONS += -DJS_NO_HELPER_THREADS main.cpp
OPTIONS += -Wl,-rpath,$(SM_INCLUDE_PATH)
OPTIONS += -lmozjs-36a1
OPTIONS += -o $(EXECUTABLE_FILENAME)

EXECUTABLE_FILENAME = js

all:
	@echo "Building\n"
	g++ $(OPTIONS)
	@echo "Creating run.sh\n\n"
	echo 'export LD_LIBRARY_PATH=$(SM_DIST_PATH)lib' > run.sh
	echo './$(EXECUTABLE_FILENAME)' >> run.sh
	@echo "\nFinished\n"
	@echo "To run application: sh run.sh\n"
[/code]




Sources & useful links
--------------

Getting the lastest SpiderMonkey source code

[https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Getting_SpiderMonkey_source_code#Getting_the_latest_SpiderMonkey_source_code]

Building SpiderMonkey

[https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Build_Documentation]
